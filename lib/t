const cache = require('../lib/cache')
const Table = require('easy-table')
const cloud = { aws: require('../lib/aws'), azure: require('../lib/azure') }
const cfg = require('../lib/settings')
//const AzureEnvironment = msRestAzure.AzureEnvironment;
const cidata = require('../lib/cidata')
const token = require('./azureToken')
const fs = require('fs')
const rl = require('../test/data/azure/resourceList')
const t = require('../templates/arm/vm/template')
const d = require('../test/data/projectSettings')
const package = require('../package')
const log = console.error;

async function main() {
  let config = await cfg.load(cloud)
  let roleData = cidata.getVm({data: config.cidata, name: "bastion"})
  log(config)
  log(foo({ config }))
  log(JSON.stringify(mkTemplate( {subject: 'vm', roleData, config}),null , 3))
}


parseResource({
  name,
  type,
  apiVersion,
  location,
  properties,
  dependesOn,
  ...d
}) { 
   
  return {
 ...(name && { name }),
 ...(type && { type }),
 ...(apiVersion && { apiVersion }),
 ...(location && { location }),
 ...(properties && { properties }),
 ...(dependsOn && { dependsOn }),
}

if ( require.main === module )  main().catch(e => console.error(e));

// InstanceName = role.name + index



// az resource list | jq 
azureTypes = {
 vm: 


//sort.uniq the types
const rl = require('../test/data/azure/resourceList')
 rl.map( e=> e.type).sort().filter((x, i, a) => !i || x != a[i-1])

const typeMap = { as: 'Microsoft.Compute/availabilitySets',
  Disk: 'Microsoft.Compute/disks',
  Image: 'Microsoft.Compute/images',
  VMSS: 'Microsoft.Compute/virtualMachineScaleSets',
  VM: 'Microsoft.Compute/virtualMachines',
  vmext: 'Microsoft.Compute/virtualMachines/extensions',
  AppSG: 'Microsoft.Network/applicationSecurityGroups',
  NetIf: 'Microsoft.Network/networkInterfaces',
  NetSG: 'Microsoft.Network/networkSecurityGroups',
  PublicIP: 'Microsoft.Network/publicIPAddresses',
  Network: 'Microsoft.Network/virtualNetworks',
  StorageAcc: 'Microsoft.Storage/storageAccounts' };


> var xl = require('../test/data/azure/vm_show_getVMs')

var name = 'bastion'
var tn = typeMap['VM']
rl.filter( e => { return e.type == tn }).map(e=> e.name)
var nameRE = RegExp(`^${name}-\\d*\$`)
rl.filter( e => { return e.type == tn && nameRE.test(e.name) }).map(e => e.name)

rl.filter( e => { return  nameRE.test(e.name) })
var nameRE = RegExp(`^${name}-\\d*\$`)


x.map(e => e.name)

> x = ['bastion-0', 'bastion-3', 'a', 'b']
> name= 'bastion'
> var nameRE = RegExp(`^${name}-\\d*\$`)
> nameRE.test('bastion-0')
true
> nameRE.test('bastion-aa')
false
> x = ['bastion-0', 'bastion-3', 'a', 'b']
[ 'bastion-0', 'bastion-3', 'a', 'b' ]
> x.filter(n => nameRE.test(n))
[ 'bastion-0', 'bastion-3' ]

// get existing Instance names, given list of resources (rl), role name, subject, rg
function getInstances( { rl, name, subject, rg } ) {
  let resType = typeMap[subject.toUpperCase()]
  let nameRE = RegExp(`^${name}-\\d*\$`)
  return rl.filter( e => { return e.type == resType && nameRE.test(e.name) && e.resourceGroup == rg })
}

// get the next available Instance name, given list of resources (rl), role name, subject, rg

[ 'backuptest1',
  'AppServer',
  'BastionServer',
  'DataServer',
  'WebServer',
  'ci-el7-3',
  'ci-el7-4',
  'el7-1',
  'el7-7',
  'ol-ci',
  'navgemmaster',
  'hpclabmaster' ]

